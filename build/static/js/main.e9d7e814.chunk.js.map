{"version":3,"sources":["component/smallCategory.ts","constant.ts","apollo.ts","component/sharemusle.tsx","fragments.ts","pages/client/sharemusles.tsx","pages/404.tsx","usehook/useMe.tsx","component/header.tsx","component/button.tsx","component/formerror.tsx","pages/user/profile.tsx","pages/user/confirm-email.tsx","pages/client/search.tsx","pages/client/country.tsx","component/dish.tsx","component/dishOption.tsx","pages/client/sharemusle.tsx","pages/owner/my-sharemusles.tsx","pages/owner/add-sharemusle.tsx","api/globalTypes.ts","pages/owner/my-shareMusle.tsx","pages/owner/add-service.tsx","component/guaderDriver.tsx","component/dashboard.tsx","pages/user/order.tsx","routers/logged-in-router.tsx","pages/create-account.tsx","pages/login.tsx","routers/logged-out-router.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["smallCategory","LOCALSTORAGE_TOKEN","PATTERN","token","localStorage","getItem","isLoggedInVar","makeVar","Boolean","authTokenVar","wsLink","WebSocketLink","uri","options","reconnect","connectionParams","httpLink","createHttpLink","authLink","setContext","_","headers","splitLink","split","query","definition","getMainDefinition","kind","operation","concat","client","ApolloClient","link","cache","InMemoryCache","typePolicies","Query","fields","isLoggedIn","read","ShareMusle","name","coverImg","countryName","id","address","to","className","style","backgroundImage","SHAREMUSLE_FRAGMENT","gql","COUNTRY_FRAGMENT","DISH_FRAGMENT","ORDER_FRAGMENT","ORDER_FULL_FRAGMENT","SHAREMUSLES_QUERY","ShareMusles","useState","page","setPage","useQuery","variables","input","data","loading","history","useHistory","useForm","register","getValues","handleSubmit","onSubmit","searchTerm","push","pathname","search","minLength","type","placeholder","allCountries","countries","map","country","slug","allShareMusle","results","shareMusle","onClick","current","totalPages","NotFound","ME_QUERY","useMe","Header","me","verified","icon","faGg","faUser","Button","canClick","actionText","FormError","errorMessage","EDIT_PROFILE_MUTATION","Profile","useApolloClient","userData","useMutation","onCompleted","editProfile","ok","prevEmail","email","newEmail","writeFragment","fragment","editProfileMutation","mode","defaultValues","formState","errors","isValid","Helmet","password","pattern","message","error","removeItem","VERIFYEMAIL_MUTATION","ConfirmEmail","verifyEmail","useEffect","window","location","href","code","SEARCH_QUERY","Search","useLocation","useLazyQuery","callQuery","replace","searchShareMusle","totalResults","shareMusles","COUNTRY_QUERY","Country","params","useParams","Dish","description","price","isSelected","orderStarted","addItemToOrder","removeOrder","dishOption","children","faCheckCircle","faCircle","length","DishOption","dishId","extra","addOptionToItem","removeOptionFormItem","SHAREMUSLE_QUERY","CREATE_ORDER_MUTATION","shareMusleId","setOrderStarted","orderItems","setOrderItems","find","order","filter","optionName","oldItem","aOption","option","isOptionSelected","item","getOptionFromItem","createOrder","orderId","alert","createOrderMutation","confirm","items","menu","dish","index","MY_SHAREMUSLES","MyShareMusles","myShareMusles","CountrySelect","OrderStatus","UserRole","CREATE_SHAREMUSLE","AddShareMusle","image","setImage","createShareMusle","setUploading","queryResult","readQuery","writeQuery","__typename","isPromoted","createShareMusleMutation","uploading","a","file","actualFile","formBody","FormData","append","fetch","method","body","json","url","required","Object","keys","accept","MY_SHAREMUSLE_QUERY","PENDING_ORDERS","DELETE_SERVICES","MyshareMusle","subscriptionData","useSubscription","pendingOrders","console","log","myShareMusle","domainPadding","height","width","innerWidth","containerComponent","labels","datum","Math","floor","y","labelComponent","fontSize","renderInPortal","dy","orders","x","createdAt","total","interpolation","strokeWidth","stroke","tickLabelComponent","tickLabels","tickFormat","tick","Date","toLocaleDateString","CREATE_DISH","AddService","createDish","goBack","refetchQueries","createDishMutation","setValue","OptionsNumber","setOptionsNumber","rest","optionObjcets","theId","min","now","idToDelete","GuaderDriver","defaultCoords","lat","lng","DashBoard","guaderCoords","setGuaderCoords","setMap","maps","setMaps","Success","coords","latitude","longitude","Error","navigator","geolocation","watchPosition","enableHighAccuracy","panTo","google","LatLng","Geocoder","geocode","result","status","bootstrapURLKeys","key","defaultCenter","defaultZoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","GET_ORDER_QUERY","ORDER_SUBSCRIPTION","DELETE_ORDER","EDIT_ORDER","Order","editOrderMutation","subscribeToMore","deleteOrder","deleteMutation","getOrder","document","updateQuery","prev","updateOrders","onBtnClick","newStatus","customer","role","User","Arrived","Guader","Pending","Going","Protecting","clientRoutes","path","component","commonRoutes","guaderRoutes","LoggedInRouter","route","exact","CREATE_ACCOUNT_MUTATION","CreateAccount","countrySelect","United_Kingdom","createAccount","createAccountMutation","createAccountResult","createAccountInput","LOGIN_MUTATION","Login","login","setItem","loginMutation","loginMutationResult","loginInput","LoggedOutRouter","App","useReactiveVar","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","ApolloProvider","getElementById"],"mappings":"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AAA,E,kBAAAA,E,kBAAAA,E,cAAAA,E,sBAAAA,E,YAAAA,E,YAAAA,E,kBAAAA,E,gBAAAA,E,cAAAA,E,kBAAAA,E,cAAAA,E,gBAAAA,E,MAAAA,E,wBAAAA,E,cAAAA,E,oBAAAA,E,gBAAAA,E,gBAAAA,E,wBAAAA,E,YAAAA,E,gBAAAA,E,kBAAAA,E,kBAAAA,E,kBAAAA,E,cAAAA,E,8BAAAA,E,sBAAAA,E,wBAAAA,E,cAAAA,E,sBAAAA,E,wBAAAA,E,gBAAAA,E,oBAAAA,E,oBAAAA,E,YAAAA,E,cAAAA,E,oCAAAA,E,wBAAAA,E,sBAAAA,E,gBAAAA,E,wBAAAA,E,kBAAAA,E,gBAAAA,E,oBAAAA,E,wBAAAA,E,kBAAAA,E,wBAAAA,E,kBAAAA,E,cAAAA,E,cAAAA,E,4BAAAA,E,4CAAAA,E,0BAAAA,E,sBAAAA,E,cAAAA,E,kBAAAA,E,0BAAAA,E,gBAAAA,E,YAAAA,E,oBAAAA,E,cAAAA,E,kDAAAA,E,gBAAAA,E,oCAAAA,E,oBAAAA,E,YAAAA,E,0BAAAA,E,gBAAAA,E,oBAAAA,E,cAAAA,E,8CAAAA,E,kBAAAA,E,gBAAAA,E,gBAAAA,E,8CAAAA,E,0BAAAA,E,oEAAAA,E,cAAAA,E,wBAAAA,E,8CAAAA,E,4BAAAA,E,kBAAAA,E,gBAAAA,E,wBAAAA,E,4BAAAA,E,sBAAAA,E,oBAAAA,E,oBAAAA,E,kCAAAA,E,kBAAAA,E,4BAAAA,E,0BAAAA,E,0BAAAA,E,cAAAA,E,sBAAAA,E,cAAAA,E,oBAAAA,E,sBAAAA,E,gBAAAA,E,0BAAAA,E,cAAAA,E,gBAAAA,E,wBAAAA,E,oBAAAA,E,oBAAAA,E,wBAAAA,E,wBAAAA,E,0BAAAA,E,YAAAA,E,cAAAA,E,0CAAAA,E,kBAAAA,E,gBAAAA,E,4BAAAA,E,gBAAAA,E,gBAAAA,E,kBAAAA,E,4CAAAA,E,gCAAAA,E,kBAAAA,E,wBAAAA,E,kBAAAA,E,sBAAAA,E,kBAAAA,E,cAAAA,E,gBAAAA,E,qBAAAA,Q,cA2MAC,K,kBAAAA,E,cAAAA,E,kBAAAA,E,yBAAAA,Q,cAOAC,K,gBAAAA,E,aAAAA,Q,qCGnNCiF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","file":"static/js/main.e9d7e814.chunk.js","sourcesContent":["export enum smallCategory{\n    France = \"France\",\n    China = 'China',\n    USA = 'USA',\n    Germany = 'Germany'\n}","export const LOCALSTORAGE_TOKEN = 'xon-token';\nexport const PATTERN = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/","import { ApolloClient, createHttpLink, InMemoryCache, makeVar, split } from \"@apollo/client\";\nimport { setContext } from '@apollo/client/link/context';\nimport { LOCALSTORAGE_TOKEN } from \"./constant\";\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from \"@apollo/client/utilities\";\n\nconst token = localStorage.getItem(LOCALSTORAGE_TOKEN);\nexport const isLoggedInVar = makeVar(Boolean(token));\nexport const authTokenVar = makeVar(token);\n\nconst wsLink = new WebSocketLink({\n  uri: 'ws://localhost:5000/graphql',\n  options: {\n    reconnect: true,\n    connectionParams:{\n      'x-jwt':authTokenVar() || \"\"\n    }\n  }\n});\n\nconst httpLink = createHttpLink({\n  uri:'http://localhost:5000/graphql',\n})\n\nconst authLink = setContext((_, {headers}) =>{\n  return{\n    headers:{\n      ...headers,\n      'x-jwt': authTokenVar() || \"\",\n    },\n  };\n})\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  authLink.concat(httpLink),\n);\n\nexport const client = new ApolloClient({\n    link: splitLink,\n    cache: new InMemoryCache({\n      typePolicies:{\n        Query:{\n          fields:{\n            isLoggedIn: {\n              read(){\n                return isLoggedInVar(); \n              },\n            },\n            token:{\n              read(){\n                return authTokenVar();\n              }             \n            }\n          }\n        }\n      }\n    }),\n    \n  });","import React from 'react';\nimport { Link } from 'react-router-dom';\n\ninterface ISharemusleProps{\n    id: string;\n    name: string;\n    coverImg?: string;\n    countryName: string;\n    address: string;\n}\n\nexport const ShareMusle:React.FC<ISharemusleProps> = ({name, coverImg, countryName ,id, address}) => {\n    return(\n        <Link to={`/shareMusle/${id}`}>\n        <div className='flex flex-col'>\n            <div style={{backgroundImage: `url(${coverImg})`}}\n             className='bg-red-600 rounded-lg py-40 bg-cover bg-center transform hover:scale-105 transition'></div>\n             <h3 className='lg:text-white text-xl mt-2'>\n                {name}\n            </h3>\n            <div className='lg:text-white opacity-70 text-base'>{address}</div>\n             <span className='lg:text-gray-300 border-t-2 lg:border-gray-400 pt-2 border-gray-200 text-xs mt-2'>\n                {countryName} \n             </span>\n        </div>\n        </Link>\n    )\n}","import gql from \"graphql-tag\";\n\nexport const SHAREMUSLE_FRAGMENT = gql`\n fragment ShareMusleParts on ShareMusle {\n    id\n    name\n    address\n    coverImg\n    country{\n        name\n    }\n    isPromoted\n }\n`\n\nexport const COUNTRY_FRAGMENT = gql`\n fragment CountryParts on Country{\n     id\n     name\n     coverImg\n     slug\n     shareMusleCount\n }\n`;\n\nexport const DISH_FRAGMENT = gql`\n fragment DishParts on Dish{\n     id\n     name\n     price\n     photo\n     description\n     options{\n         name\n         extra\n         choices{\n             name\n             extra\n         }\n     }\n }\n`\n\nexport const ORDER_FRAGMENT = gql`\n fragment OrderParts on Order{\n     id\n     total\n     createdAt\n }\n`\n\nexport const ORDER_FULL_FRAGMENT = gql`\n fragment OrderFull on Order{\n    id\n    status\n    total\n    driver{\n        email\n    }\n    customer{\n        email\n    }\n    shareMusle{\n        name\n    }\n }\n`","import React, { useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { shareMuslesPageQuery, shareMuslesPageQueryVariables } from '../../api/shareMuslesPageQuery';\nimport { ShareMusle } from '../../component/sharemusle';\nimport { useHistory } from 'react-router';\nimport { useForm } from 'react-hook-form';\nimport { SHAREMUSLE_FRAGMENT } from '../../fragments';\nimport { Helmet } from 'react-helmet-async';\nimport { Link } from 'react-router-dom';\n\n\n\nconst SHAREMUSLES_QUERY = gql`\n query shareMuslesPageQuery($input: ShareMuslesInput!){\n    allCountries{\n        ok\n        error\n        countries{\n            id\n            name\n            coverImg\n            slug\n            shareMusleCount\n        }\n    }\n    allShareMusle(input: $input){\n        ok\n        error\n        totalResults\n        totalPages\n        results{\n            ...ShareMusleParts\n        }\n    }\n }\n ${SHAREMUSLE_FRAGMENT}\n`\nexport interface IProps{\n    searchTerm: string;\n}\n\nexport const ShareMusles = () => {\n    const [page, setPage] = useState(1);\n    const {data, loading} = useQuery<shareMuslesPageQuery, shareMuslesPageQueryVariables>(SHAREMUSLES_QUERY,{\n        variables:{\n            input:{\n                page\n            }\n        }\n    })\n    const onNextPageClick = () => setPage((current) => current + 1);\n    const onPrevPageClick = () => setPage((current) => current - 1 );\n    const history = useHistory();\n    const {register, getValues, handleSubmit} = useForm<IProps>();\n    const onSearch = () =>{\n        const {searchTerm} = getValues();\n        history.push({\n            pathname:'/search',\n            search: `?term=${searchTerm}`\n        })\n    }\n\n    return(\n        <div className='lg:bg-gray-600 h-screen'>\n            <Helmet><title>Home | XON</title></Helmet>\n                <form className='flex w-full justify-center items-center py-16 lg:py-28 bg-gray-100 lg:bg-gray-800'\n                      onSubmit={handleSubmit(onSearch)}>\n                    <input\n                    {...register('searchTerm', {minLength:1})}\n                    type=\"search\" \n                    placeholder='Search ShareMusles...'\n                    className='searchInput'\n                    />\n                </form>\n                {!loading && (\n                <div className='lg:bg-gray-700'>\n                  <div className='max-w-screen-2xl mx-auto px-5 lg:px-20 pt-5 lg:pt-10 lg:bg-gray-00 pb-24'>\n                    <div className='overflow-x-auto'>\n                    <div className='flex justify-evenly max-w-xs lg:max-w-screen-sm mx-auto '>\n                        {data?.allCountries.countries?.map((country) => (\n                          <Link key={country.id + ''} to={`/country/${country.slug}`}>\n                            <div className='flex flex-col items-center cursor-pointer group' key={country.id}>\n                                <div\n                                className='bg-cover w-10 h-10 text-5xl rounded-full text-center group-hover:opacity-60 transition'\n                                >{country.coverImg}</div>\n                                <span className='mt-1 pl-3 text-sm text-center font-medium lg:text-white'>\n                                    {country.name}\n                                </span>\n                            </div>\n                            </Link>\n                        ))}\n                    </div>\n                    </div>\n                    <div className='grid lg:grid-cols-4 gap-10 mt-10 grid-cols-1'>\n                        {data?.allShareMusle.results?.map((shareMusle) => (\n                        <ShareMusle \n                        address={shareMusle.address}\n                        key={shareMusle.id}\n                        id={shareMusle.id + \"\"}\n                        countryName={shareMusle.country?.name + \"\"}\n                        name={shareMusle.name}\n                        coverImg={shareMusle.coverImg}\n                        />\n                        ))}\n                    </div>\n                        <div className='grid grid-cols-3 max-w-sm mx-auto text-center lg:text-white mt-10'>\n                            {page > 1 ? (\n                                <button onClick={onPrevPageClick}>&larr;</button>\n                            ) : (<div></div>)}\n                            <span className='text-sm'> The Page {page} of {data?.allShareMusle.totalPages}</span>\n                            {page === data?.allShareMusle.totalPages ? (<div></div>):(\n                                <button onClick={onNextPageClick}>&rarr;</button>\n                            )}\n                        </div>\n                </div>\n                </div>\n                )}\n        </div>\n    )\n    }","import React from'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Link } from 'react-router-dom';\n\nexport const NotFound = () => {\n    return(\n        <div className='h-screen flex flex-col items-center lg:justify-center lg:bg-gray-700 lg:text-white'>\n            <Helmet><title>Not Found | XON</title></Helmet>\n            <div className='w-full text-center px-5 mt-10 lg:mb-10'>\n            <h2 className='text-2xl font-semibold mb-3 '>Page Not Found</h2>\n            <h4 className='text-base font-medium mb-5'> The page you're looking for does not exist or has moved.</h4>\n            <Link to='/' className='text-indigo-500 lg:text-yellow-200 hover:underline'>\n                Go back home &rarr;\n            </Link>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { meQuery } from '../api/meQuery';\n\nconst ME_QUERY = gql`\n query meQuery{\n     me{\n         id\n         email\n         role\n         verified\n         countrySelect \n     }\n }\n`;\n\nexport const useMe = () =>{\n    return useQuery<meQuery>(ME_QUERY)\n}","import React from 'react';\nimport { faGg } from '@fortawesome/free-brands-svg-icons';\nimport { faUser } from '@fortawesome/free-regular-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Link } from 'react-router-dom';\nimport { useMe } from '../usehook/useMe';\nexport const Header = () =>{\n   /* useEffect(() => {\n        const sayHi=()=>{\n            alert('XON AI finished your email!');\n        }\n        setTimeout(sayHi, 10000);\n    },[])*/\n    //!data.me.verified 로 나중에 변경\n    const {data} = useMe();\n    return(\n        <>\n        {data?.me.verified && (\n            <div className='bg-yellow-50 flex justify-center py-3 items-center'>\n                <span className='text-blue-600 text-xs font-semibold'>\n                    XON AI is checking your email\n                    </span>\n            </div>\n        )}\n        <div className='lg:bg-pink-300'>\n            <div className='w-full flex justify-between items-center lg:text-white max-w-screen-3xl mx-auto py-2 px-5 lg:px-10'>\n                <Link to='/'>\n                   <FontAwesomeIcon icon={faGg} className='text-2xl text-pink-700'/>\n                </Link>\n                <Link to='/edit-profile' className='bg-pink-700 px-3 py-1 rounded-2xl'>\n                   <FontAwesomeIcon icon={faUser} className='text-xl'/>\n                </Link>\n            </div>\n        </div>\n        </>\n        \n    )\n}\n/*\n<Link to='/confirm'>\n<span className='text-blue-600 text-xs font-semibold'>\n                    Please check your Email\n                    </span>\n</Link>*/","import React from 'react';\n\ninterface IButtonProps {\n    canClick: boolean;\n    loading: boolean;\n    actionText: string;\n}\n\nexport const Button: React.FC<IButtonProps> = ({canClick, loading, actionText}) => {\n    return(\n        <button className={`button mt-2 py-2 text-lg ${canClick ? \"bg-indigo-500 hover:bg-indigo-600\" : \"bg-gray-500 pointer-events-none\"}`}>\n            {loading ? \"Loading\" : actionText}\n        </button>\n    )\n}","import React from 'react';\n\ninterface IError{\n    errorMessage: string\n\n}\n\nexport const FormError: React.FC<IError> = ({errorMessage}) => (\n    <span className=\"error\">\n        {errorMessage}\n    </span>\n)","import React from 'react';\nimport { useApolloClient, useMutation } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { useForm } from 'react-hook-form';\nimport { editProfile, editProfileVariables } from '../../api/editProfile';\nimport { isLoggedInVar } from '../../apollo';\nimport { Button } from '../../component/button';\nimport { FormError } from '../../component/formerror';\nimport { LOCALSTORAGE_TOKEN, PATTERN } from '../../constant';\nimport { useMe } from '../../usehook/useMe';\nimport { Helmet } from 'react-helmet';\n\nconst EDIT_PROFILE_MUTATION = gql`\n mutation editProfile($input: EditProfileInput!){\n    editProfile(input: $input){\n        ok\n        error\n    }\n }\n`\n\ninterface IFormProps{\n    email?: string;\n    password?: string;\n}\n\nexport const Profile = () => {\n    const onClick = () => {\n        isLoggedInVar(false);\n        localStorage.removeItem(LOCALSTORAGE_TOKEN)\n    }\n    const client = useApolloClient();\n    const {data: userData} = useMe();\n    const onCompleted=(data:editProfile)=>{\n        const {\n            editProfile:{\n                ok\n            }\n        } = data;\n        if(ok && userData){\n            const {me:{email: prevEmail}} = userData;\n            const {email: newEmail} = getValues();\n            if(prevEmail !== newEmail){\n                client.writeFragment({\n                    id:`User:${userData.me.id}`,\n                    fragment:gql`\n                    fragment EditedUser on User {\n                        verified\n                        email\n                    }\n                    `,\n                    data:{\n                        email: newEmail,\n                        verified: false\n                    }\n                })\n            }\n        }\n    }\n    const [editProfileMutation, {data, loading}] = useMutation<editProfile, editProfileVariables>(EDIT_PROFILE_MUTATION,{\n        onCompleted\n    });\n    const {register, handleSubmit, formState:{errors, isValid}, getValues } = useForm<IFormProps>({\n        mode:'onChange', \n        defaultValues:{\n           email: userData?.me.email,\n        }\n    });\n    const onSubmit = () => {\n        const {email, password} = getValues();\n        editProfileMutation({\n            variables:{\n                input:{\n                    email,\n                    ...(password !== \"\" && {password}),\n                }\n            }\n        })\n    }\n\n    return(\n        <div className='h-screen lg:bg-gray-700 flex flex-col lg:justify-center items-center'>\n           <div className='w-full max-w-screen-sm flex flex-col items-center lg:mb-3D2'>\n               <Helmet><title>edit-profile | XON</title></Helmet>\n             <h2 className='lg:text-white text-3xl font-semibold mb-6'>Edit Your Profile</h2>\n             <form className='w-full grid gap-3 px-5' onSubmit={handleSubmit(onSubmit)}>\n              <input\n              className='input'\n              type='email' \n              placeholder='example@eample.com'\n              {...register('email', {pattern: PATTERN})}/>\n              {errors.email?.message && (\n                  <FormError errorMessage={errors.email.message}/>\n              )}\n              <input\n              className='input'\n              type='password' \n              placeholder='password'\n              {...register('password', {minLength:3})}/>\n              {errors.password?.message && (\n                  <FormError errorMessage={errors.password.message}/>\n              )}\n              {errors.password?.type === \"minLength\" && (\n                  <FormError errorMessage={'Password must be more than 3 chars.'}/>\n              )}\n              <Button canClick={isValid} loading={loading} actionText={\"Save Profile\"}/>\n              {data?.editProfile.error && (\n                  <FormError errorMessage={data.editProfile.error}/>\n              )}\n              <button className='text-center py-2 font-medium tracking-wide bg-yellow-100 rounded-lg' onClick={onClick}>Log Out</button>\n             </form>\n           </div>\n        </div>\n    )\n}","import React, { useEffect } from 'react';\nimport { useApolloClient, useMutation } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { verifyEmailMutation, verifyEmailMutationVariables } from '../../api/verifyEmailMutation';\nimport { useMe } from '../../usehook/useMe';\nimport { useHistory } from 'react-router';\nimport { Helmet } from 'react-helmet-async';\n\nconst VERIFYEMAIL_MUTATION = gql`\n mutation verifyEmailMutation($input:VerifyEmailInput!){\n    verifyEmail(input: $input){\n        ok\n        error\n    }\n }\n`\n\nexport const ConfirmEmail = () => {\n    const history = useHistory();\n    const { data: userData } = useMe();\n    const client = useApolloClient();\n    const onCompleted = (data: verifyEmailMutation) => {\n      const {\n        verifyEmail: { ok },\n      } = data;\n      if (ok && userData?.me.id) {\n        client.writeFragment({\n          id: `User:${userData.me.id}`,\n          fragment: gql`\n            fragment VerifiedUser on User {\n              verified\n            }\n          `,\n          data: {\n            verified: true,\n          },\n        });\n        history.push('/');\n      }\n    };\n    const [verifyEmail] = useMutation<verifyEmailMutation, verifyEmailMutationVariables>(\n      VERIFYEMAIL_MUTATION,\n      {\n        onCompleted,\n      }\n    );\n    useEffect(() => {\n      const [_, code] = window.location.href.split(\"code=\");\n      verifyEmail({\n        variables: {\n          input: {\n            code,\n          },\n        },\n      });\n    }, [verifyEmail]);\n\n    return(\n            <div className='lg:bg-gray-700 text-white h-screen flex flex-col justify-center items-center pb-28'>\n              <Helmet><title>confirm email | XON</title></Helmet>\n                <h2 className='text-lg mb-2 font-semibold'>Confirming email...</h2>\n                <h4 className='text-base'>Please wait, don't close this page...</h4>\n            </div>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport { useLazyQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { Helmet } from 'react-helmet-async';\nimport { useForm } from 'react-hook-form';\nimport { useHistory, useLocation } from 'react-router';\nimport { searchShareMusles, searchShareMuslesVariables } from '../../api/searchShareMusles';\nimport { ShareMusle } from '../../component/sharemusle';\nimport { SHAREMUSLE_FRAGMENT } from '../../fragments';\nimport { IProps } from './sharemusles';\n\nconst SEARCH_QUERY = gql`\n query searchShareMusles($input: SearchShareMusleInput!){\n    searchShareMusle(input: $input){\n        ok\n        error\n        totalPages\n        totalResults\n        shareMusles{\n            ...ShareMusleParts\n        }\n    }\n }\n ${SHAREMUSLE_FRAGMENT}\n`\n\nexport const Search = () => {\n    const location = useLocation();\n    const history = useHistory();\n    const [page, setPage] = useState(1);\n    const [callQuery, {data}] = useLazyQuery<searchShareMusles, searchShareMuslesVariables>(SEARCH_QUERY);\n    useEffect(() => {\n        const [_, query] = location.search.split('?term=')\n        if(!query){\n            history.replace('/');\n        }\n        callQuery({\n            variables:{\n                input:{\n                    page,\n                    query\n                }\n            }\n        })\n    }, [history, location])\n    const {register, getValues, handleSubmit} = useForm<IProps>()\n    const onSearch = () => {\n        const {searchTerm} = getValues();\n        history.push({\n            pathname:'/search',\n            search:`?term=${searchTerm}`\n        })\n    }\n    const onNextPageClick = () => setPage(current => current + 1);\n    const onPrevPageClick = () => setPage(current => current - 1);\n   return(\n        <div className='h-screen lg:bg-gray-700'>\n            <Helmet><title>search | XON</title></Helmet>\n            <form \n               onSubmit={handleSubmit(onSearch)}\n               className='flex w-full justify-center items-center py-16 lg:py-28 bg-gray-100 lg:bg-gray-800'\n                      >\n                    <input\n                    {...register('searchTerm', {minLength:1})}\n                    type=\"search\" \n                    placeholder='Search ShareMusles...'\n                    className='searchInput'\n                    />\n            </form>\n           {Boolean(data?.searchShareMusle.totalResults) ? (\n           <div className='lg:bg-gray-700'>\n            <div className='max-w-screen-2xl mx-auto px-5 pb-20 lg:bg-gray-700 mt-20'>\n                <div className='grid lg:grid-cols-4 grid-cols-1 gap-x-5 gap-y-10 '>\n                    {data?.searchShareMusle.shareMusles?.map((shareMusle) => (\n                        <ShareMusle \n                        address={shareMusle.address}\n                        key={shareMusle.id + ''}\n                        id={shareMusle.id + ''}\n                        name={shareMusle.name}\n                        coverImg={shareMusle.coverImg}\n                        countryName={shareMusle.country?.name + \"\"}\n                        />\n                    ))}\n                </div>\n                <div className='grid max-w-sm grid-cols-3 mx-auto text-center lg:text-white mt-20 lg:bg-gray-700'>\n                    {page > 1 ? (\n                        <button onClick={onPrevPageClick}>&larr;</button>\n                    ) : (<div></div>)}\n                    <span className='text-sm'>The Page {page}</span>\n                    {page === data?.searchShareMusle.totalPages ? (\n                        <button onClick={onNextPageClick}>&rarr;</button>\n                    ) : (\n                        <div></div>\n                    )}\n                </div>\n                </div>\n                </div>\n       ):(\n           <div className='max-w-screen-2xl mx-auto flex justify-center text-center mt-20'>\n               <div className='flex flex-col'>\n                  <h2 className='text-2xl lg:text-white'>No search results found...😘</h2>\n               </div>\n            </div>)}\n       </div>\n   )\n}","import React, { useState } from'react';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { useParams } from 'react-router';\nimport { countryQuery, countryQueryVariables } from '../../api/countryQuery';\nimport { COUNTRY_FRAGMENT, SHAREMUSLE_FRAGMENT } from '../../fragments';\nimport { Helmet } from 'react-helmet';\nimport { ShareMusle } from '../../component/sharemusle';\n\nconst COUNTRY_QUERY = gql`\n query countryQuery($input: CountryInput!){\n     country(input: $input){\n        ok\n        error\n        totalPages\n        totalResults\n        shareMusles{\n            ...ShareMusleParts\n        }\n        country{\n            ...CountryParts\n        }\n     }\n }\n ${SHAREMUSLE_FRAGMENT}\n ${COUNTRY_FRAGMENT}\n`\n\ninterface IPromsProps{\n    slug: string;\n}\n\nexport const Country = () => {\n    const [page, setPage] = useState(1);\n    const params = useParams<IPromsProps>();\n    const {data} = useQuery<countryQuery, countryQueryVariables>(COUNTRY_QUERY,{\n        variables:{\n            input:{\n                page,\n                slug: params.slug\n            }\n        }\n    });\n    const onNextPageClick = () => setPage((current) => current + 1);\n    const onPrevPageClick = () => setPage((current) => current - 1 );\n    \n    return(\n        <div>\n            <Helmet><title>{`${data?.country.country?.name} | XON`}</title></Helmet>\n            <div className='h-screen lg:bg-gray-700'>\n                <div className='lg:bg-gray-800'>\n                    <div className='flex justify-center text-center border-b-2 shadow-md lg:border-gray-800 items-center py-20 lg:py-28'>\n                      <span className='lg:text-5xl text-3xl font-semibold lg:text-white'>{data?.country.country?.name}</span>\n                    </div>\n                </div>\n              <div className='lg:bg-gray-700'>\n                  <div className='max-w-screen-2xl mx-auto pt-10 px-5'>\n                      <div className='grid lg:grid-cols-4 grid-cols-1 gap-x-5 gap-y-10'>\n                      {data?.country.shareMusles?.map((shareMusle) => (\n                      <div className='pt-14'>\n                          <ShareMusle\n                          address={shareMusle.address}\n                          key={shareMusle.id + ''}\n                          id={shareMusle.id + ''}\n                          name={shareMusle.name}\n                          countryName={shareMusle.country?.name + ''}\n                          coverImg={shareMusle.coverImg}\n                          />\n                      </div>\n                  ))}\n                      </div>\n                      <div className='grid grid-cols-3 max-w-sm mx-auto text-center lg:text-white pt-16'>\n                          {page > 1 ? (\n                              <button onClick={onPrevPageClick}>&larr;</button>\n                          ) : (<div></div>)}\n                          <span>The Page {page}</span>\n                          {page !== data?.country.totalPages ? (\n                          <button onClick={onNextPageClick}>&rarr;</button>\n                          ) : (\n                               <div></div>\n                          )}\n                      </div>\n                  </div>\n                  </div>\n              </div>        \n        </div>\n    )\n}","import { faCheckCircle, faCircle } from '@fortawesome/free-regular-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { shareMusle_shareMusle_shareMusle_menu_options } from '../api/shareMusle';\n\ninterface IProps{\n  id?: number;\n  name: string;\n  price: string;\n  description: string | null;\n  isSelected?: boolean;\n  orderStarted?: boolean;\n  addItemToOrder?: (dishId: number) => void\n  removeOrder?: (dishId: number) => void\n  options?: shareMusle_shareMusle_shareMusle_menu_options[] | null; \n}\n\nexport const Dish: React.FC<IProps> = ({ \n  id = 1,\n  description, \n  name, \n  price, \n  options, \n  isSelected = false,\n  orderStarted = false,\n  addItemToOrder,\n  removeOrder,\n  children: dishOption,\n  }) => {\n\n    const onClick = () => {\n      if(orderStarted){\n        if(!isSelected && addItemToOrder){\n          addItemToOrder(id)\n        }\n        if(isSelected && removeOrder){\n          removeOrder(id)\n        }\n      }\n    }\n\n    return (\n      <div \n      className=\"px-4 py-4 border-2 lg:bg-gray-700\">\n        <div className=\"mb-2\">\n          <div className=\"text-lg font-semibold pb-2 flex justify-between\">\n            <div>\n            {name} \n            <span className='ml-2 font-medium'>${price}</span>\n            </div>\n            <span className='pr-2 text-2xl'>\n              <button onClick={onClick}>\n                {isSelected ? <FontAwesomeIcon className='text-lime-500' icon={faCheckCircle}/> : <FontAwesomeIcon  icon={faCircle}/>}\n              </button>\n            </span>\n          </div>\n          <h4 className=\"font-medium opacity-80\">{description}</h4>\n        </div>\n        {options && options.length !== 0 && (\n          <div>\n            <h5 className='py-2 font-semibold'>Service Options:</h5>\n            {dishOption}\n          </div>\n        )}\n      </div>\n    );\n  };","import React from 'react';\n\ninterface DishOptionProps{\n    name: string;\n    extra?: number | null;\n    dishId: number;\n    isSelected?: boolean;\n    addOptionToItem: (dishId: number, optionName: string) => void\n    removeOptionFormItem: (dishId: number, optionName: string) => void\n}\n\nexport const DishOption:React.FC<DishOptionProps> = ({dishId, name, extra, addOptionToItem, isSelected, removeOptionFormItem}) => {\n    const onClick = () => {\n        if(isSelected){\n            removeOptionFormItem(dishId, name)\n        }else{\n            addOptionToItem(dishId, name);\n        }\n    }\n\n    return(\n        <button \n        className={`flex border-2 px-2 py-1 mb-2 rounded-lg\n        ${isSelected ? \"border-lime-600\": \"hover:border-lime-800\"}`}\n        onClick={onClick}\n        >\n            <h6>{name}</h6>\n            <span className='ml-2'>{`$${extra}`}</span>\n        </button>\n    )\n}","import React, { useState } from'react';\nimport { useMutation, useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { DISH_FRAGMENT, SHAREMUSLE_FRAGMENT } from '../../fragments';\nimport { useHistory, useParams } from 'react-router';\nimport { Helmet } from 'react-helmet-async';\nimport { shareMusle, shareMusleVariables } from '../../api/shareMusle';\nimport { Dish } from '../../component/dish';\nimport { CreateOrderItemInput } from '../../api/globalTypes';\nimport { DishOption } from '../../component/dishOption';\nimport { createOrder, createOrderVariables} from '../../api/createOrder'\n\nconst SHAREMUSLE_QUERY = gql`\n query shareMusle($input: ShareMusleInput!){\n    shareMusle(input: $input){\n        ok\n        error\n        shareMusle{\n            ...ShareMusleParts\n            menu{\n                ...DishParts\n            }\n        }\n    }\n }\n ${SHAREMUSLE_FRAGMENT}\n ${DISH_FRAGMENT}\n`\n\nconst CREATE_ORDER_MUTATION = gql`\nmutation createOrder($input: CreateOrderInput!){\n    createOrder(input:$input){\n        ok\n        error\n        orderId\n    }\n }\n`\n\ninterface IParams{\n    id: string\n}\n\nexport const ShareMusle = () => {\n    const params = useParams<IParams>();\n    const {data} = useQuery<shareMusle, shareMusleVariables>(SHAREMUSLE_QUERY,{\n        variables:{\n            input:{\n                shareMusleId: +params.id\n            }\n        }\n    })\n    const [orderStarted, setOrderStarted] = useState(false)\n    const [orderItems, setOrderItems] = useState<CreateOrderItemInput[]>([])\n    const onTriggerOrder = () => {\n        setOrderStarted(true)\n    }\n    const getItem = (dishId: number) => {\n        return orderItems.find((order) => order.dishId === dishId);\n    }\n    const isSelected = (dishId:number) => {\n        return Boolean(getItem(dishId));\n    }\n    const addItemToOrder = (dishId: number) => {\n        if(isSelected(dishId)){\n            return;\n        }\n        setOrderItems((current) => [{dishId, options: []}, ...current])\n    }\n    const removeOrder = (dishId: number) => {\n        setOrderItems((current) => current.filter((order) => order.dishId !== dishId))\n    }\n    const addOptionToItem = (dishId: number, optionName: any) => {\n        if(!isSelected(dishId)){\n            return\n        }\n        const oldItem = getItem(dishId);\n        if(oldItem){\n            const hasOption = Boolean(oldItem.options?.find((aOption) => aOption.name == optionName))\n            if(!hasOption){\n                removeOrder(dishId);\n                setOrderItems((current) => [{dishId, options: [{name: optionName}, ...oldItem.options!]}, ...current])\n            }\n        }\n    }\n    const removeOptionFormItem = (dishId: number, optionName: string) => {\n        if(!isSelected){\n            return;\n        }\n        const oldItem = getItem(dishId);\n        if(oldItem){\n            removeOrder(dishId);\n            setOrderItems(\n                (current) => [\n                    {dishId, options: oldItem.options?.filter((option) => option.name !== optionName)}, ...current]);\n            return\n        }\n    }\n    const getOptionFromItem = (item: CreateOrderItemInput, optionName: string) => {\n        return item.options?.find((option) => option.name == optionName);\n    }\n    const isOptionSelected = (dishId: number, optionName: string) => {\n        const item = getItem(dishId);\n        if(item){\n            return Boolean(getOptionFromItem(item, optionName));\n        }\n        return false\n    }\n    const onCancelOrder = () => {\n        setOrderStarted(false)\n        setOrderItems([]);\n    }\n    const history = useHistory();\n    const onCompleted = (data: createOrder) => {\n        const {createOrder :{ok, orderId}} = data;\n        if(ok){\n            alert('Well done!')\n            history.push(`/orders/${orderId}`)\n        }\n    }\n    const [createOrderMutation, {loading}] = useMutation<createOrder, createOrderVariables>(CREATE_ORDER_MUTATION,\n        {onCompleted})\n\n    const onConfirmBtn = () => {\n        if(loading){\n            return\n        }\n        if(orderItems.length === 0 ) {\n            alert(`Can't place empty order`)\n            return\n        }\n        const ok = window.confirm('You are about to place an order');\n        if(ok){\n            createOrderMutation({\n                variables:{\n                    input:{\n                        shareMusleId: +params.id,\n                        items: orderItems\n                    }\n                }\n            })            \n        }\n    }\n   \n    return(\n        <div>\n            <Helmet><title>{`${data?.shareMusle.shareMusle?.name} | XON`}</title></Helmet>\n            <div className='h-screen lg:bg-gray-700 '>\n                <div className='lg:bg-gray-700  lg:px-16'>\n                    <div className=' max-w-screen-2xl py-2 flex justify-center mx-auto lg:bg-gray-700'>\n                        <div className='grid lg:grid-cols-3 w-full lg:bg-gray-700 px-10'>\n                            <div className='bg-red-500 bg-cover bg-center lg:mt-10 py-40 lg:py-60 rounded-2xl'\n                            style={{backgroundImage:`url(${data?.shareMusle.shareMusle?.coverImg})`}}></div>\n                            <div className='flex flex-col lg:text-white lg:bg-gray-700 rounded-xl py-5 justify-end'>\n                                <div className='lg:pl-20'>\n                                    <h4 className='font-semibold text-2xl lg:text-4xl mb-4'>{data?.shareMusle.shareMusle?.name}</h4>\n                                      <div className='text-left flex flex-col gap-y-2'>\n                                        <h5 className='font-normal text-base lg:text-2xl'>Phone: 01051741436</h5>\n                                        <h6 className='font-normal text-base lg:text-2xl'>Adress: {data?.shareMusle.shareMusle?.address}</h6>\n                                        <h6 className='font-normal text-base lg:text-2xl'>Country: {data?.shareMusle.shareMusle?.country?.name}</h6>\n                                    </div>\n                                </div>\n                            </div>\n                            \n                        </div>\n                    </div>\n                </div>\n                    <div className=' lg:px-24 max-w-screen-2xl lg:bg-gray-700 lg:text-white mx-auto px-5 lg:mt-10 pb-20'>\n                        <h1 className='lg:text-3xl text-xl lg:font-medium'>Service</h1>\n                        <div className='flex flex-col items-end pb-5 text-lg text-white mt-3 '>\n                        {!orderStarted && (\n                            <button onClick={onTriggerOrder} className='bg-lime-500 rounded-lg lg:px-5 py-2 w-full lg:w-max'>\n                                Start Order\n                            </button>\n                        )}\n                        {orderStarted && (\n                            <div className=' flex flex-col lg:flex-row lg:justify-end w-full'>\n                                <button \n                                onClick={onConfirmBtn} \n                                className='bg-lime-500 rounded-lg px-5 py-2 lg:mr-4 mb-2'>\n                                Confirm Order\n                                </button>\n                                <button \n                                onClick={onCancelOrder}\n                                className='bg-red-500 rounded-lg px-5 py-2 lg:mb-2'>\n                                    Cancel Order\n                                </button>\n                            </div>\n                        )}\n                        </div>\n                        \n                        <div className='lg:bg-gray-700'>\n                        <div className='grid lg:grid-cols-3 gap-x-5 gap-y-3'>\n                            {data?.shareMusle.shareMusle?.menu.map((dish) => (\n                            <Dish\n                                id={dish.id}\n                                key={dish.id + \"\"}\n                                name={dish.name}\n                                price={dish.price + \"\"}\n                                description={dish.description}\n                                options={dish.options}\n                                isSelected={isSelected(dish.id)}\n                                addItemToOrder={addItemToOrder}\n                                removeOrder={removeOrder}\n                                orderStarted={orderStarted}\n                                >\n                                {dish.options?.map((option, index) => (\n                                    <DishOption\n                                    key={index}\n                                    extra={option.extra}\n                                    name={option.name}\n                                    dishId={dish.id}\n                                    addOptionToItem={addOptionToItem}\n                                    isSelected={isOptionSelected(dish.id, option.name)}\n                                    removeOptionFormItem={removeOptionFormItem}\n                                    />\n                                ))}\n                            </Dish>\n                            ))}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n /*<div className='text-white'>\n    <div className='bg'>Description</div>\n    <div>License</div>\n    <div>Hobby</div>\n</div>\n    */","import React from'react';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { Helmet } from 'react-helmet-async';\nimport { SHAREMUSLE_FRAGMENT } from '../../fragments';\nimport { Link } from 'react-router-dom';\nimport { ShareMusle } from '../../component/sharemusle';\nimport { myShareMusles } from '../../api/myShareMusles';\n\nexport const MY_SHAREMUSLES = gql`\n query myShareMusles{\n    myShareMusles{\n        ok\n        error\n        shareMusles{\n            ...ShareMusleParts\n        }\n    }\n }\n ${SHAREMUSLE_FRAGMENT}\n`\n\nexport const MyShareMusles = () => {\n    const {data} = useQuery<myShareMusles>(MY_SHAREMUSLES);\n    return(\n        <div className='h-screen lg:bg-gray-600 px-5'>\n            <div><Helmet><title>My ShareMusles | XON</title></Helmet></div>\n            <div className='max-w-screen-2xl mx-auto lg:bg-gray-600 py-2 lg:px-5 lg:pt-16'>\n                <h2 className='lg:text-white text-3xl lg:text-4xl font-semibold'>My ShareMusles</h2>\n                {data?.myShareMusles.ok && data.myShareMusles.shareMusles.length === 0 ? (\n                    <>\n                    <h4 className='lg:text-white mt-5 text-xl'>You have no shareMusles.</h4>\n                    <Link to='/add-shareMusle'>\n                        <div className='lg:text-yellow-200 text-lime-600 hover:underline mt-5'>Click To Create Your ShareMusle! &rarr;</div>\n                    </Link>\n                    </>\n                ):(\n                    <div className='grid lg:grid-cols-4 gap-x-5 gap-y-10 mt-6 lg:mt-10 grid-cols-1'>\n                        {data?.myShareMusles.shareMusles.map((shareMusle) => (\n                        <ShareMusle\n                            key={shareMusle.id + \"\"}\n                            id={shareMusle.id + \"\"}\n                            coverImg={shareMusle.coverImg}\n                            name={shareMusle.name}\n                            countryName={shareMusle.country?.name + \"\"}\n                            address={shareMusle.address}\n                            />\n                        ))}\n                    </div>\n                )}\n            </div>\n        </div>        \n    )\n}","import React, { useState } from \"react\";\nimport { useApolloClient, useMutation } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { createShareMusle, createShareMusleVariables } from \"../../api/createShareMusle\";\nimport { useHistory } from \"react-router\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useForm } from \"react-hook-form\";\nimport { Button } from \"../../component/button\";\nimport { smallCategory } from \"../../component/smallCategory\";\nimport { FormError } from \"../../component/formerror\";\nimport { MY_SHAREMUSLES } from \"./my-sharemusles\";\n\nconst CREATE_SHAREMUSLE = gql`\n mutation createShareMusle($input: CreateShareMusleInput!){\n    createShareMusle(input: $input){\n        ok\n        error\n        shareMusleId\n    }\n }\n`\n\ninterface IFormProps {\n    name: string;\n    address: string;\n    countryName: smallCategory;\n    file: FileList;\n}\n\nexport const AddShareMusle = () => {\n    const client = useApolloClient();\n    const history = useHistory();\n    const [image, setImage] = useState(\"\");\n    const onCompleted = (data: createShareMusle) => {\n        const {createShareMusle:{ok, shareMusleId}} = data;\n        if(ok){\n            const {name, address, countryName, /*file*/} = getValues();\n            setUploading(false);\n            const queryResult = client.readQuery({query:MY_SHAREMUSLES})\n            client.writeQuery({\n                query: MY_SHAREMUSLES,\n                data:{\n                    myShareMusles :{\n                        ...queryResult.myShareMusles,\n                        shareMusles:[{\n                        address,\n                        country:{\n                        name: countryName,\n                        __typename: \"Country\",\n                        },\n                        coverImg: image,\n                        id: shareMusleId,\n                        isPromoted: false,\n                        name,\n                        __typename: \"ShareMusle\"},\n                        ...queryResult.myShareMusles.shareMusles\n                    ]\n                    }\n                }\n            })\n            history.push('/')\n            alert('Well done!')\n        }\n    }\n    const [createShareMusleMutation, {data}] = useMutation<createShareMusle, createShareMusleVariables>(CREATE_SHAREMUSLE,{\n        onCompleted\n    })\n    const {register, handleSubmit, getValues, formState:{isValid}} = useForm<IFormProps>({mode:'onChange'});\n    const [uploading, setUploading] = useState(false)\n    const onSubmit = async() => {\n        try{\n            setUploading(true);\n            const {name, address, countryName, file} = getValues();\n            const actualFile = file[0];\n            const formBody = new FormData();\n            formBody.append('file', actualFile);\n            const {url: coverImg} = await (\n                await fetch('http://localhost:5000/uploads/',{\n                    method:'POST',\n                    body: formBody\n                })\n            ).json();\n            setImage(coverImg)\n            createShareMusleMutation({\n                variables:{\n                    input:{\n                        name,\n                        coverImg,\n                        countryName,\n                        address\n                    }\n                }\n            })\n        }catch(error){}\n    }\n    \n    return(\n        <div>\n            <Helmet><title>Create ShareMusle | XON</title></Helmet>\n            <div className='h-screen lg:bg-gray-600 flex flex-col lg:justify-center items-center'>\n                <div className='w-full max-w-screen-sm  flex flex-col items-center lg:mb-32'>\n                    <h2 className='text-3xl lg:text-white mb-6 font-semibold'>Create ShareMusle!</h2>\n                    <form className='w-full grid px-5 gap-3' onSubmit={handleSubmit(onSubmit)}>\n                        <input\n                         className='input'\n                         type='text'\n                         placeholder='Name'\n                         {...register('name',{required:'Name is required'})}\n                        />\n                        <input\n                        className='input'\n                        type='text'\n                        placeholder='Address'\n                        {...register('address', {required:`Address is required`})}\n                        />\n                        <select {...register('countryName', {required: true})} className='input'>\n                         {Object.keys(smallCategory).map((smallCategory, index) => (\n                             <option key={index}>{smallCategory}</option>\n                         ))}\n                     </select>\n                        <input\n                        className='input'\n                        type='file'\n                        {...register('file', {required: true})}\n                        accept=\"image/*\"\n                        />\n                        <Button canClick={isValid} loading={uploading} actionText='Create ShareMusle'/>\n                        {data?.createShareMusle.error && (\n                            <FormError errorMessage={data.createShareMusle.error}/>\n                        )}\n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n}","/* tslint:disable */\n/* eslint-disable */\n// @generated\n// This file was automatically generated and should not be edited.\n\n//==============================================================\n// START Enums and Input Objects\n//==============================================================\n\nexport enum CountrySelect {\n  Afghanistan = \"Afghanistan\",\n  Albania = \"Albania\",\n  Algeria = \"Algeria\",\n  Andorra = \"Andorra\",\n  Angola = \"Angola\",\n  Antigua_and_Barbuda = \"Antigua_and_Barbuda\",\n  Argentina = \"Argentina\",\n  Armenia = \"Armenia\",\n  Australia = \"Australia\",\n  Austria = \"Austria\",\n  Azerbaijan = \"Azerbaijan\",\n  Bahrain = \"Bahrain\",\n  Bangladesh = \"Bangladesh\",\n  Barbados = \"Barbados\",\n  Belarus = \"Belarus\",\n  Belgium = \"Belgium\",\n  Belize = \"Belize\",\n  Benin = \"Benin\",\n  Bhutan = \"Bhutan\",\n  Bolivia = \"Bolivia\",\n  Bosniaand_Herzegovina = \"Bosniaand_Herzegovina\",\n  Botswana = \"Botswana\",\n  Brazil = \"Brazil\",\n  Brunei = \"Brunei\",\n  Bulgaria = \"Bulgaria\",\n  BurkinaFaso = \"BurkinaFaso\",\n  Burma = \"Burma\",\n  Burundi = \"Burundi\",\n  Cambodia = \"Cambodia\",\n  Cameroon = \"Cameroon\",\n  Canada = \"Canada\",\n  CapeVerde = \"CapeVerde\",\n  Central_African_Republic = \"Central_African_Republic\",\n  Chad = \"Chad\",\n  Chile = \"Chile\",\n  China = \"China\",\n  Colombia = \"Colombia\",\n  Comoros = \"Comoros\",\n  Costa_Rica = \"Costa_Rica\",\n  Cote_dIvoire = \"Cote_dIvoire\",\n  Croatia = \"Croatia\",\n  Cuba = \"Cuba\",\n  Cyprus = \"Cyprus\",\n  Czech_Republic = \"Czech_Republic\",\n  Democratic_Republic_of_theCongo = \"Democratic_Republic_of_theCongo\",\n  Denmark = \"Denmark\",\n  Djibouti = \"Djibouti\",\n  Dominica = \"Dominica\",\n  Dominican_Republic = \"Dominican_Republic\",\n  East_Timor = \"East_Timor\",\n  Ecuador = \"Ecuador\",\n  Egypt = \"Egypt\",\n  El_Salvador = \"El_Salvador\",\n  Equatorial_Guinea = \"Equatorial_Guinea\",\n  Eritrea = \"Eritrea\",\n  Estonia = \"Estonia\",\n  Ethiopia = \"Ethiopia\",\n  Fiji = \"Fiji\",\n  Finland = \"Finland\",\n  France = \"France\",\n  Gabon = \"Gabon\",\n  Georgia = \"Georgia\",\n  Germany = \"Germany\",\n  Ghana = \"Ghana\",\n  Greece = \"Greece\",\n  Grenada = \"Grenada\",\n  Guatemala = \"Guatemala\",\n  Guinea_Bissau = \"Guinea_Bissau\",\n  Guyana = \"Guyana\",\n  Haiti = \"Haiti\",\n  Holy_See = \"Holy_See\",\n  Honduras = \"Honduras\",\n  Hong_Kong = \"Hong_Kong\",\n  Hungary = \"Hungary\",\n  Iceland = \"Iceland\",\n  India = \"India\",\n  Indonesia = \"Indonesia\",\n  Iran = \"Iran\",\n  Iraq = \"Iraq\",\n  Ireland = \"Ireland\",\n  Israel = \"Israel\",\n  Italy = \"Italy\",\n  Jamaica = \"Jamaica\",\n  Japan = \"Japan\",\n  Jordan = \"Jordan\",\n  K = \"K\",\n  Kazakhstan = \"Kazakhstan\",\n  Kenya = \"Kenya\",\n  Kiribati = \"Kiribati\",\n  Kosovo = \"Kosovo\",\n  Kuwait = \"Kuwait\",\n  Kyrgyzstan = \"Kyrgyzstan\",\n  Laos = \"Laos\",\n  Latvia = \"Latvia\",\n  Lebanon = \"Lebanon\",\n  Lesotho = \"Lesotho\",\n  Liberia = \"Liberia\",\n  Libya = \"Libya\",\n  Liechtenstein = \"Liechtenstein\",\n  Lithuania = \"Lithuania\",\n  Luxembourg = \"Luxembourg\",\n  Macau = \"Macau\",\n  Macedonia = \"Macedonia\",\n  Madagascar = \"Madagascar\",\n  Malawi = \"Malawi\",\n  Malaysia = \"Malaysia\",\n  Maldives = \"Maldives\",\n  Mali = \"Mali\",\n  Malta = \"Malta\",\n  Marshall_Islands = \"Marshall_Islands\",\n  Mauritania = \"Mauritania\",\n  Mauritius = \"Mauritius\",\n  Mexico = \"Mexico\",\n  Micronesia = \"Micronesia\",\n  Moldova = \"Moldova\",\n  Monaco = \"Monaco\",\n  Mongolia = \"Mongolia\",\n  Montenegro = \"Montenegro\",\n  Morocco = \"Morocco\",\n  Mozambique = \"Mozambique\",\n  Namibia = \"Namibia\",\n  Nauru = \"Nauru\",\n  Nepal = \"Nepal\",\n  Nether_lands = \"Nether_lands\",\n  Netherlands_Antilles = \"Netherlands_Antilles\",\n  New_Zealand = \"New_Zealand\",\n  Nicaragua = \"Nicaragua\",\n  Niger = \"Niger\",\n  Nigeria = \"Nigeria\",\n  North_Korea = \"North_Korea\",\n  Norway = \"Norway\",\n  Oman = \"Oman\",\n  Pakistan = \"Pakistan\",\n  Palau = \"Palau\",\n  Palestinian_Territories = \"Palestinian_Territories\",\n  Panama = \"Panama\",\n  Papua_New_Guinea = \"Papua_New_Guinea\",\n  Paraguay = \"Paraguay\",\n  Peru = \"Peru\",\n  Philippines = \"Philippines\",\n  Poland = \"Poland\",\n  Portugal = \"Portugal\",\n  Qatar = \"Qatar\",\n  Republic_of_the_Congo = \"Republic_of_the_Congo\",\n  Romania = \"Romania\",\n  Russia = \"Russia\",\n  Rwanda = \"Rwanda\",\n  Saint_Kitts_and_Nevis = \"Saint_Kitts_and_Nevis\",\n  Saint_Lucia = \"Saint_Lucia\",\n  Saint_Vincent_and_the_Grenadines = \"Saint_Vincent_and_the_Grenadines\",\n  Samoa = \"Samoa\",\n  San_Marino = \"San_Marino\",\n  Sao_Tome_and_Principe = \"Sao_Tome_and_Principe\",\n  Saudi_Arabia = \"Saudi_Arabia\",\n  Senegal = \"Senegal\",\n  Serbia = \"Serbia\",\n  Seychelles = \"Seychelles\",\n  Sierra_Leone = \"Sierra_Leone\",\n  Singapore = \"Singapore\",\n  Slovakia = \"Slovakia\",\n  Slovenia = \"Slovenia\",\n  Solomon_Islands = \"Solomon_Islands\",\n  Somalia = \"Somalia\",\n  South_Africa = \"South_Africa\",\n  South_Korea = \"South_Korea\",\n  South_Sudan = \"South_Sudan\",\n  Spain = \"Spain\",\n  Sri_Lanka = \"Sri_Lanka\",\n  Sudan = \"Sudan\",\n  Suriname = \"Suriname\",\n  Swaziland = \"Swaziland\",\n  Sweden = \"Sweden\",\n  Switzerland = \"Switzerland\",\n  Syria = \"Syria\",\n  Taiwan = \"Taiwan\",\n  Tajikistan = \"Tajikistan\",\n  Tanzania = \"Tanzania\",\n  Thailand = \"Thailand\",\n  TheBahamas = \"TheBahamas\",\n  The_Gambia = \"The_Gambia\",\n  Timor_Leste = \"Timor_Leste\",\n  Togo = \"Togo\",\n  Tonga = \"Tonga\",\n  Trinidad_and_Tobago = \"Trinidad_and_Tobago\",\n  Tunisia = \"Tunisia\",\n  Turkey = \"Turkey\",\n  Turkmenistan = \"Turkmenistan\",\n  Tuvalu = \"Tuvalu\",\n  Uganda = \"Uganda\",\n  Ukraine = \"Ukraine\",\n  United_Arab_Emirates = \"United_Arab_Emirates\",\n  United_Kingdom = \"United_Kingdom\",\n  Uruguay = \"Uruguay\",\n  Uzbekistan = \"Uzbekistan\",\n  Vanuatu = \"Vanuatu\",\n  Venezuela = \"Venezuela\",\n  Vietnam = \"Vietnam\",\n  Yemen = \"Yemen\",\n  Zambia = \"Zambia\",\n  Zimbabwe = \"Zimbabwe\",\n}\n\nexport enum OrderStatus {\n  Arrived = \"Arrived\",\n  Going = \"Going\",\n  Pending = \"Pending\",\n  Protecting = \"Protecting\",\n}\n\nexport enum UserRole {\n  Guader = \"Guader\",\n  User = \"User\",\n}\n\nexport interface CountryInput {\n  page?: number | null;\n  slug: string;\n}\n\nexport interface CreateAccountInput {\n  email: string;\n  password: string;\n  role: UserRole;\n  countrySelect?: CountrySelect | null;\n}\n\nexport interface CreateDishInput {\n  name: string;\n  price: number;\n  description: string;\n  options?: DishOptionInputType[] | null;\n  shareMusleId: number;\n}\n\nexport interface CreateOrderInput {\n  shareMusleId: number;\n  items: CreateOrderItemInput[];\n}\n\nexport interface CreateOrderItemInput {\n  dishId: number;\n  options?: OrderItemOptionInput[] | null;\n}\n\nexport interface CreateShareMusleInput {\n  name: string;\n  address: string;\n  coverImg: string;\n  countryName: string;\n}\n\nexport interface DeleteDishInput {\n  dishId: number;\n}\n\nexport interface DeleteOrderInput {\n  orderId: number;\n}\n\nexport interface DishChoiceInputType {\n  name: string;\n  extra?: number | null;\n}\n\nexport interface DishOptionInputType {\n  name: string;\n  choices?: DishChoiceInputType[] | null;\n  extra?: number | null;\n}\n\nexport interface EditOrderInput {\n  id: number;\n  status: OrderStatus;\n}\n\nexport interface EditProfileInput {\n  email?: string | null;\n  password?: string | null;\n  role?: UserRole | null;\n  countrySelect?: CountrySelect | null;\n}\n\nexport interface GetOrderInput {\n  id: number;\n}\n\nexport interface LoginInput {\n  email: string;\n  password: string;\n}\n\nexport interface MyShareMusleInput {\n  id: number;\n}\n\nexport interface OrderItemOptionInput {\n  name: string;\n  choice?: string | null;\n}\n\nexport interface SearchShareMusleInput {\n  page?: number | null;\n  query: string;\n}\n\nexport interface ShareMusleInput {\n  shareMusleId: number;\n}\n\nexport interface ShareMuslesInput {\n  page?: number | null;\n}\n\nexport interface UpdateOrderInput {\n  id: number;\n}\n\nexport interface VerifyEmailInput {\n  code: string;\n}\n\n//==============================================================\n// END Enums and Input Objects\n//==============================================================\n","import React, { useEffect } from 'react';\nimport gql from 'graphql-tag';\nimport { DISH_FRAGMENT, ORDER_FRAGMENT, ORDER_FULL_FRAGMENT, SHAREMUSLE_FRAGMENT } from '../../fragments';\nimport { useMutation, useQuery, useSubscription } from '@apollo/client';\nimport { useHistory, useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { myShareMusle, myShareMusleVariables } from '../../api/myShareMusle';\nimport { Helmet } from 'react-helmet-async';\nimport { Dish } from '../../component/dish';\nimport { VictoryChart, VictoryAxis, VictoryVoronoiContainer, VictoryLine, VictoryLabel, VictoryTooltip } from 'victory'\nimport { DishOption } from '../../component/dishOption';\nimport { pendingOrders } from '../../api/pendingOrders';\nimport { deleteDish, deleteDishVariables } from '../../api/deleteDish';\n\nexport const MY_SHAREMUSLE_QUERY = gql`\n query myShareMusle($input: MyShareMusleInput!){\n    myShareMusle(input: $input){\n        ok\n        error\n        shareMusle{\n            ...ShareMusleParts\n            menu{\n                ...DishParts\n            }\n            orders{\n                ...OrderParts\n            }\n        }\n    }\n }\n ${SHAREMUSLE_FRAGMENT}\n ${DISH_FRAGMENT}\n ${ORDER_FRAGMENT}\n`\nconst PENDING_ORDERS = gql`\nsubscription pendingOrders{\n    pendingOrders{\n        ...OrderFull\n    }\n}\n${ORDER_FULL_FRAGMENT}\n`\n\nconst DELETE_SERVICES = gql`\n  mutation deleteDish($input: DeleteDishInput!){\n      deleteDish(input: $input){\n          ok\n      }\n  }\n`\n\ninterface IParamsProps{\n    id: string;\n}\n\nexport const MyshareMusle = () => {\n    const {id} = useParams<IParamsProps>()\n    const history = useHistory();\n    const {data} = useQuery<myShareMusle, myShareMusleVariables>(MY_SHAREMUSLE_QUERY,{\n        variables:{\n            input:{\n                id: +id\n            }\n        }\n    })\n    const {data: subscriptionData} = useSubscription<pendingOrders>(PENDING_ORDERS)\n    useEffect(() => {\n        if(subscriptionData?.pendingOrders.id){\n            history.push(`/orders/${subscriptionData.pendingOrders.id}`)\n        }\n    },[subscriptionData])\n\n    const [deleteDishMutation] = useMutation<deleteDish, deleteDishVariables>(DELETE_SERVICES)\n    const onClick = () => {\n        deleteDishMutation({\n            variables:{\n                input:{\n                    dishId: +id\n                }\n            }\n        })\n    }\n\n    console.log(id)\n\n    return(\n        <div className='lg:bg-gray-600 h-screen'>\n            <Helmet><title>My ShareMusle | XON</title></Helmet>\n            <div className='max-w-screen-2xl px-5 lg:mx-auto pt-3 lg:py-10 lg:pt-20 grid lg:grid-cols-2 grid-cols-1'>\n                <div className='lg:grid-cols-2 grid gap-5'>\n                    <div \n                    style={{backgroundImage: `url(${data?.myShareMusle.shareMusle?.coverImg})`}}\n                    className='bg-yellow-300 py-48 rounded-lg bg-cover bg-center'></div>\n                    <div className='lg:text-white lg:px-10 flex flex-col justify-end lg:gap-y-4 gap-y-2'>\n                       <h2 className='font-semibold text-2xl lg:text-4xl'>{data?.myShareMusle.shareMusle?.name}</h2>\n                       <h4 className='font-normal text-base lg:text-2xl'>Adress : {data?.myShareMusle.shareMusle?.address}</h4>\n                       <h4 className='font-normal text-base lg:text-2xl'>Country : {data?.myShareMusle.shareMusle?.country?.name}</h4>\n                       <h4 className='font-normal text-base lg:text-2xl'>Phone : +01015125351</h4>\n                    </div>\n                </div>\n                <div className='flex flex-col justify-center text-white gap-y-4 items-center mt-6 lg:mb-6'>\n                    <div className='flex lg:gap-x-5 gap-x-3'>\n                       <div><Link className='bg-green-500 text-sm lg:text-lg font-medium px-5 py-2' to={`/shareMusle/${id}/add-service`}>Add Service &rarr;</Link></div>\n                       <div><Link className='bg-red-500 text-sm lg:text-lg font-medium px-5 py-2' to={''}>Buy Promotion &rarr;</Link></div>\n                    </div>\n                  </div> \n                </div>\n                <div className='lg:mt-10 mt-8 lg:text-white'>\n                    {data?.myShareMusle.shareMusle?.menu.length === 0 ? (\n                        <h4 className='lg:text-3xl text-xl lg:font-medium'>Please Upload Your Service!</h4>\n                    ): (\n                    <div className='max-w-screen-2xl px-5 mx-auto'>\n                        <h1 className='lg:text-3xl text-xl lg:font-medium mb-5 lg:mb-8'>My Services</h1>\n                          <div className='grid lg:grid-cols-3 gap-x-5 gap-y-3'>\n                          {data?.myShareMusle.shareMusle?.menu.map((dish) => (\n                            <Dish\n                            key={dish.id + \"\"}\n                            name={dish.name}\n                            description={dish.description}\n                            price={dish.price + \"\"}\n                            options={dish.options}\n                            >\n                            {dish.options?.map((option, index) => (\n                                    <DishOption\n                                    key={index}\n                                    name={option.name}\n                                    dishId={dish.id}\n                                    addOptionToItem={() => false}\n                                    removeOptionFormItem={() => false}\n                                    />\n                                ))}\n                            </Dish>\n                          ))}\n                          </div>\n                    </div>)}\n                </div>\n                <div className='lg:bg-gray-600 pb-20'>\n                <div className='max-w-screen-2xl px-5 mx-auto mt-10 lg:text-white'>\n                    {data?.myShareMusle.ok ? (\n                    <h1 className='text-center font-medium text-lg'>\n                        A new technology will be updated soon...\n                    </h1>) : (<div>\n                        <h1 className='text-center font-medium text-4xl pt-10'>Average Sales</h1>\n                    <div className='mt-5'>\n                        <VictoryChart \n                        domainPadding={50}\n                        height={500} \n                        width={window.innerWidth} \n                        containerComponent={<VictoryVoronoiContainer/>}>\n                            <VictoryLine \n                            labels={(datum) => `$${Math.floor(datum.y)}`}\n                            labelComponent={<VictoryTooltip style={{fontSize:18}} renderInPortal dy={-20}/>}\n                            data={data?.myShareMusle.shareMusle?.orders.map((order) => ({\n                                x: order.createdAt,\n                                y: order.total\n                            }))}\n                            interpolation='linear'\n                            style={{data: {strokeWidth: 5, stroke: \"#40FFE0\"}}}/>\n                            <VictoryAxis \n                            tickLabelComponent={<VictoryLabel renderInPortal/>}\n                            style={{\n                                tickLabels:{\n                                    fontSize: 20\n                                }\n                            }}\n                            tickFormat={(tick) => new Date(tick).toLocaleDateString()}\n                            />\n                        </VictoryChart>\n                    </div>\n                    </div>)}\n                </div>\n                </div>\n        </div>   \n    )\n}","import React, { useState } from'react';\nimport { useMutation } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { useForm } from 'react-hook-form';\nimport { useHistory, useParams } from 'react-router';\nimport { createDish, createDishVariables } from '../../api/createDish';\nimport { Button } from '../../component/button';\nimport { MY_SHAREMUSLE_QUERY } from './my-shareMusle';\nimport { Helmet } from 'react-helmet-async';\n\nconst CREATE_DISH = gql`\n  mutation createDish($input: CreateDishInput!) {\n    createDish(input: $input) {\n      ok\n      error\n    }\n  }\n`;\ninterface IParams{\n    shareMusleId: string;\n}\n\ninterface IForm{\n    name: string;\n    price: string;\n    description: string;\n    [key: string]: string;\n}\n\nexport const AddService = () => {\n    const {shareMusleId} = useParams<IParams>();\n    const history = useHistory();\n    const onCompleted = (data: createDish) => {\n        const {createDish:{ok}} = data;\n        if(ok){\n            history.goBack();\n        }\n    }\n    const [createDishMutation, {loading}] = useMutation<createDish, createDishVariables>(CREATE_DISH,{\n         onCompleted,\n         refetchQueries:[\n            {\n                query: MY_SHAREMUSLE_QUERY,\n                variables:{\n                    input:{\n                        id: +shareMusleId\n                    }\n                }\n            }\n        ]\n    });\n    const {getValues, handleSubmit, register, formState:{isValid}, setValue} = useForm<IForm>({mode:'onChange'})\n    const onSubmit = () =>{\n        const {name, price, description, ...rest} =getValues()\n        const optionObjcets = OptionsNumber.map((theId) => ({\n            name: rest[`${theId} - OptionName`],\n            extra: +rest[`${theId} - OptionExtra`]\n        }))\n        createDishMutation({\n            variables:{\n                input:{\n                    name,\n                    price: +price,\n                    description,\n                    shareMusleId: +shareMusleId,\n                    options: optionObjcets\n                }\n            }\n        });\n        alert('Well done!')\n    }\n    const [OptionsNumber, setOptionsNumber] = useState<number[]>([]);\n    const onAddOptionClick = () => {\n        setOptionsNumber((current) => [Date.now(), ...current])\n    }\n    const onDeleteClick = (idToDelete: number) => {\n        setOptionsNumber((current) => current.filter((id) => id !== idToDelete));\n        setValue(`${idToDelete} - OptionName`,\"\")\n        setValue(`${idToDelete} - OptionExtra`, \"\")\n    }\n\n    return(\n        <div className='h-screen lg:bg-gray-700 flex flex-col lg:justify-center items-center'>\n            <Helmet><title>Create Service | XON</title></Helmet>\n           <div className='w-full max-w-screen-sm flex flex-col items-center lg:mb-32'>\n             <h2 className='lg:text-white text-3xl font-semibold mb-6'>Create Service</h2>\n             <form className='w-full grid gap-3 px-5' onSubmit={handleSubmit(onSubmit)}>\n              <input\n              className='input'\n              type='text' \n              placeholder='집까지 보조'\n              {...register('name',{required: \"Name is required\"})}/>\n              <input\n              className='input'\n              type='text'\n              placeholder='Description'\n              {...register('description', {required: \"Description is required.\"})}/>\n              <input\n              className='input'\n              type='number'\n              placeholder=\"Price\"\n              min={0}\n              {...register('price', {required: `Price is required`})}\n              />\n              <div className='my-2 lg:text-white'>\n                  <h4 className='font-medium mb-2 text-lg'>Service Options</h4>\n                  <span \n                  onClick={onAddOptionClick}\n                  className='text-sm cursor-pointer bg-white text-gray-700 font-semibold py-1 px-2 rounded-lg'>\n                    Add Service Options\n                    </span>\n                {OptionsNumber.length !== 0 && OptionsNumber.map((id) => (\n                    <div key={id} className='mt-2'>\n                        <input\n                        //@ts-ignore\n                        {...register(`${id} - OptionName`)} \n                        type='text' \n                        placeholder={'Bus Ride'} \n                        className='text-black focus:outline-none shadow-inner my-2 lg:-mb-2 bg-gray-100 px-4 py-2 mr-4 border-1 rounded-lg'/>\n                        <input\n                        //@ts-ignore\n                        {...register(`${id} - OptionExtra`)} \n                        type='number' \n                        placeholder={`0$`} \n                        className='text-black focus:outline-none shadow-inner bg-gray-100 px-4 py-2 border-1 rounded-lg'/>\n                        <span \n                        onClick={() => onDeleteClick(id)}\n                        className='focus:outline-none px-4 py-2 border-1 rounded-lg bg-red-500 ml-4 cursor-pointer'>\n                            Delete\n                        </span>\n                    </div>\n                ))} \n              </div>\n              <Button canClick={isValid} loading={loading} actionText={`Create Service`}/>\n             </form>\n           </div>\n        </div>\n    )\n}","import React from \"react\";\n\ninterface IDriver {\n    lat: number;\n    lng: number;\n    $hover?: any;\n}\n\nexport const GuaderDriver:React.FC<IDriver> = () => {\n    return(\n        <div className='text-lg'>\n            🥷\n        </div>\n    )\n}","import React, { useEffect, useState } from'react'\nimport GoogleMapReact from 'google-map-react';\nimport { GuaderDriver } from './guaderDriver';\n\ninterface ICoords{\n    lat: number;\n    lng: number;\n}\nconst defaultCoords = {lat: 37.51320598135089,lng: 127.101950169125}    \n\nexport const DashBoard = () => {\n    const [guaderCoords, setGuaderCoords] = useState<ICoords>(defaultCoords);\n    const [customerCoords, setCustomerCoords] = useState<ICoords>(defaultCoords);\n    const [map, setMap] = useState<google.maps.Map>();\n    const [maps, setMaps] = useState<any>();\n    const Success = ({coords: {latitude, longitude}}: GeolocationPosition) => {\n        setGuaderCoords({lat:latitude, lng: longitude})\n        console.log(guaderCoords)\n    }\n    const Error = (error: GeolocationPositionError) => {\n        console.log(error)\n    }\n    useEffect(() =>{\n        navigator.geolocation.watchPosition(Success, Error,{\n            enableHighAccuracy: true\n        })\n    },[])\n    useEffect(() => {\n        if(map && maps) {\n            map.panTo(new google.maps.LatLng(guaderCoords.lat, guaderCoords.lng))\n            const geocoder = new google.maps.Geocoder();\n            geocoder.geocode(\n                {location: new google.maps.LatLng(guaderCoords.lat, guaderCoords.lng)},\n                (result, status) => {\n                    console.log(result, status)\n                }\n            )\n        }\n    }, [guaderCoords.lat, guaderCoords.lng]);\n    const ApiLoaded = ({map, maps}: {map: any, maps: any}) => {\n        map.panTo(new google.maps.LatLng(guaderCoords.lat, guaderCoords.lng))\n        setMap(map);\n        setMaps(maps);\n    }\n\n    const onGetRouteClick = () => {\n        if(map){\n            const directionsService = new google.maps.DirectionsService();\n            const directionsRenderer = new google.maps.DirectionsRenderer();\n            directionsRenderer.setMap(map);\n            directionsService.route({\n                origin:{\n                    location: new google.maps.LatLng(guaderCoords.lat, guaderCoords.lng)\n                },\n                destination:{\n                    location: new google.maps.LatLng(customerCoords.lat, customerCoords.lng)\n                },\n                travelMode: google.maps.TravelMode.TRANSIT //한국은 교통만 가능 다른 모드는 국적 이동이 필요함\n            },\n            (result) => {\n                directionsRenderer.setDirections(result)\n            }\n          )\n        }\n    }   \n\n    return(\n        <>\n            <div\n            className='rounded-lg overflow-hidden'\n            style={{height: \"58vh\", width: \"100%\"}}>\n                <GoogleMapReact\n                bootstrapURLKeys={{ key: \"AIzaSyBbRtmQhCFlTdRBjJduovbO0qgdXAfbCNg\"}}\n                defaultCenter={defaultCoords}\n                defaultZoom={18}\n                yesIWantToUseGoogleMapApiInternals\n                onGoogleApiLoaded={ApiLoaded}\n                >\n                    <GuaderDriver\n                    lat={guaderCoords.lat}\n                    lng={guaderCoords.lng}\n                    />\n                </GoogleMapReact>\n            </div>\n                \n        </>\n    )\n}","import React, { useEffect } from 'react';\nimport { useMutation, useQuery, useSubscription } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { useHistory, useParams } from 'react-router';\n\nimport { Helmet } from 'react-helmet-async';\nimport { ORDER_FULL_FRAGMENT } from '../../fragments';\nimport { updateOrders } from '../../api/updateOrders';\nimport { useMe } from '../../usehook/useMe';\nimport { deleteOrder, deleteOrderVariables } from '../../api/deleteOrder';\nimport { editOrder, editOrderVariables } from '../../api/editOrder';\nimport { getOrder, getOrderVariables } from '../../api/getOrder';\nimport { OrderStatus, UserRole } from '../../api/globalTypes';\nimport { DashBoard } from '../../component/dashboard';\n\n\nconst GET_ORDER_QUERY = gql`\n query getOrder($input: GetOrderInput!){\n    getOrder(input: $input){\n        ok\n        error\n        order{\n            ...OrderFull\n        }\n    }\n }\n ${ORDER_FULL_FRAGMENT}\n`\n\nconst ORDER_SUBSCRIPTION = gql`\n subscription updateOrders($input: UpdateOrderInput!){\n    updateOrders(input: $input){\n        ...OrderFull\n    }\n }\n ${ORDER_FULL_FRAGMENT}\n`\n\nconst DELETE_ORDER = gql`\n mutation deleteOrder($input: DeleteOrderInput!){\n     deleteOrder(input: $input){\n        ok\n        error\n     }\n }\n`\n\nconst EDIT_ORDER = gql`\n mutation editOrder($input: EditOrderInput!){\n     editOrder(input: $input){\n         ok\n         error\n     }\n }\n`\n\ninterface IProps{\n    id: string;\n}\n\nexport const Order = () => {\n    const params = useParams<IProps>()\n    const history = useHistory();\n    const {data: userData} = useMe();\n    const [editOrderMutation] = useMutation<editOrder, editOrderVariables>(EDIT_ORDER)\n    const {data, subscribeToMore} = useQuery<getOrder, getOrderVariables>(GET_ORDER_QUERY, {\n        variables:{\n            input:{\n                id: +params.id\n            }\n        }\n    })\n    const onCompleted = (data: deleteOrder) => {\n        const {deleteOrder: {ok}} = data\n        if(ok){\n            history.goBack()\n        }\n    }\n    const [deleteMutation] = useMutation<deleteOrder, deleteOrderVariables>(DELETE_ORDER,{\n        onCompleted\n    })\n    const onClick = () => {\n        deleteMutation({\n            variables:{\n                input:{\n                    orderId: +params.id\n                }\n            }\n        })\n    }\n\n    useEffect(() => {\n        if(data?.getOrder.ok){\n            subscribeToMore({\n                document: ORDER_SUBSCRIPTION,\n                variables:{\n                    input:{\n                        id: +params.id\n                    }\n                },\n                updateQuery:(prev, {subscriptionData: {data}}: {subscriptionData: {data: updateOrders}}) => {\n                    if(!data) return prev;\n                    return{\n                        getOrder:{\n                            ...prev.getOrder,\n                            order:{\n                                ...data.updateOrders\n                            }\n                        }\n                    }\n                }\n            })\n        }\n    },[data])\n\n    const onBtnClick = (newStatus: OrderStatus) => {\n        editOrderMutation({\n            variables:{\n                input:{\n                    id: +params.id,\n                    status: newStatus\n                }\n            }\n        })\n    }\n    \n    return(\n        <div className='h-screen lg:bg-gray-700 flex flex-col lg:justify-center items-center'>\n            <Helmet><title>{`Order #${data?.getOrder.order?.id} | XON`}</title></Helmet>\n            <div className='w-full max-w-screen-xl lg:text-white lg:mt-12 mt-2 px-5 grid lg:grid-cols-2 gap-y-5 lg:gap-x-5'>\n                <div className='rounded-lg border-2 border-gray-300 flex flex-col justify-center items-center'>\n                    <div className='border-b-2 text-xl text-center py-4 w-full bg-pink-700 text-white'>\n                        Order #{data?.getOrder.order?.id}\n                    </div>\n                    <div className='px-5 w-full text-left'>\n                        <div className='py-8 text-3xl border-b-2 text-center'>\n                            ${data?.getOrder.order?.total}\n                        </div>\n                        <div className='py-5 border-b-2 text-sm'>\n                        <span>Prepared By:</span>{\" \"}\n                        <span className='text-xl'>{data?.getOrder.order?.shareMusle?.name}</span>\n                        </div>\n                        <div className='py-5 border-b-2 text-sm'>\n                            <span>Guader To:</span>{\" \"}\n                            <span className='text-xl'>{data?.getOrder.order?.customer?.email}</span>\n                        </div>\n                        <div className='py-8 text-base text-center'>\n                            <span>Guader Status:</span>{\" \"}\n                            <span className='text-xl text-lime-500'>{data?.getOrder.order?.status}</span>   \n                        </div>\n                        {userData?.me.role === UserRole.User &&\n                         data?.getOrder.order?.status !== OrderStatus.Arrived &&(\n                        <div className='pb-10 text-base text-center'>\n                           <button onClick={onClick} className='bg-red-500 text-sm lg:text-lg font-medium px-5 py-2'>Canncel Order</button>\n                        </div>\n                        )}\n                        {userData?.me.role === UserRole.Guader && (\n                            <>\n                            {data?.getOrder.order?.status === OrderStatus.Pending && (\n                                <div className='pb-10 text-base text-center'>\n                                <button \n                                onClick={() => onBtnClick(OrderStatus.Going)}\n                                className='bg-lime-500 text-sm lg:text-lg font-medium px-5 py-2 mr-2'>Accept Order</button>\n                                <button onClick={onClick} className='bg-red-500 text-sm lg:text-lg font-medium px-5 py-2'>Canncel Order</button>\n                                </div>\n                            )}\n                            {data?.getOrder.order?.status === OrderStatus.Going && (\n                                <div className='pb-10 text-base text-center'>\n                                <button \n                                onClick={() => onBtnClick(OrderStatus.Protecting)}\n                                className='bg-lime-500 text-sm lg:text-lg font-medium px-5 py-2 mr-2'>Protecting Customer</button>\n                                <button onClick={onClick} className='bg-red-500 text-sm lg:text-lg font-medium px-5 py-2'>Canncel Order</button>\n                                </div>\n                            )}\n                            {data?.getOrder.order?.status === OrderStatus.Protecting && (\n                                <div className='pb-10 text-base text-center'>\n                                <button \n                                onClick={() => onBtnClick(OrderStatus.Arrived)}\n                                className='bg-lime-500 text-sm lg:text-lg font-medium px-5 py-2 mr-2'>Destination Arrived</button>\n                                </div>\n                            )}                            \n                            </>\n                        )}\n                    </div>\n                </div>\n                <DashBoard/>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { ShareMusles } from '../pages/client/sharemusles';\nimport { NotFound } from '../pages/404';\nimport { Header } from '../component/header';\nimport { useMe } from '../usehook/useMe';\nimport { Profile } from '../pages/user/profile';\nimport { ConfirmEmail } from '../pages/user/confirm-email';\nimport { Search } from '../pages/client/search';\nimport { Country } from '../pages/client/country';\nimport { ShareMusle } from '../pages/client/sharemusle';\nimport { MyShareMusles } from '../pages/owner/my-sharemusles';\nimport { AddShareMusle } from '../pages/owner/add-sharemusle';\nimport { MyshareMusle } from '../pages/owner/my-shareMusle';\nimport { AddService } from '../pages/owner/add-service';\nimport { Order } from '../pages/user/order';\nimport { UserRole } from '../api/globalTypes';\n\n\nconst clientRoutes = [\n    {\n        path: '/',\n        component: <ShareMusles/>\n    },\n    {\n        path: '/search',\n        component: <Search/>\n    },\n    {\n        path: '/country/:slug',\n        component: <Country/>\n    },\n    {\n        path: '/shareMusle/:id',\n        component: <ShareMusle/>\n    },\n]\n\nconst commonRoutes = [\n    {\n        path:'/edit-profile',\n        component:<Profile/>\n    },\n    {\n        path:'/confirm',\n        component:<ConfirmEmail/>\n    },\n    {\n        path:'/orders/:id',\n        component:<Order/>\n    }\n];\n\nconst guaderRoutes = [\n    {\n        path:'/',\n        component:<MyShareMusles/>\n    },{\n        path:'/add-sharemusle',\n        component:<AddShareMusle/>\n    },{\n        path:'/shareMusle/:id',\n        component:<MyshareMusle/>\n    },{\n        path:'/shareMusle/:shareMusleId/add-service',\n        component:<AddService/>\n    }\n]\n\nexport const LoggedInRouter = () => {\n    const {data, error, loading} = useMe()\n    if(!data || loading || error){\n        return(\n            <div className='h-screen flex justify-center items-center lg:bg-gray-700'>\n                <span className='text-2xl font-semibold tracking-wide lg:text-white'>Loading...</span>\n            </div>\n        )\n    }\n\n    return(\n        <Router>\n            <Header/>\n            <Switch>\n                {data.me.role === UserRole.User && clientRoutes.map((route) => (\n                    <Route exact key={route.path} path={route.path}>{route.component}</Route>\n                ))}\n                {data.me.role === UserRole.Guader && guaderRoutes.map((route) =>(\n                    <Route exact key={route.path} path={route.path}>{route.component}</Route>\n                ))}\n                {commonRoutes.map((route) => (\n                    <Route exact key={route.path} path={route.path}>{route.component}</Route>\n                ))}\n                <Route>\n                    <NotFound/>\n                </Route>\n            </Switch>\n        </Router>\n    )\n}\n","import React from 'react'\nimport gql from 'graphql-tag'\nimport { useForm } from 'react-hook-form'\nimport { Link, useHistory } from 'react-router-dom'\nimport { Button } from '../component/button'\nimport { CountrySelect, UserRole } from '../api/globalTypes'\nimport { FormError } from '../component/formerror'\nimport { useMutation } from '@apollo/client'\nimport { createAccountMutation, createAccountMutationVariables } from '../api/createAccountMutation'\nimport { Helmet } from 'react-helmet-async'\nimport { PATTERN } from '../constant'\n\n\nconst CREATE_ACCOUNT_MUTATION = gql`\n mutation createAccountMutation($createAccountInput: CreateAccountInput!){\n    createAccount(input: $createAccountInput){\n        ok\n        error\n    }\n }\n`\n\ninterface IFormProps{\n    email: string;\n    password: string;\n    role: UserRole;\n    countrySelect: CountrySelect;\n}\n\nexport const CreateAccount = () => {\n    const history = useHistory();\n    const {register, getValues, formState:{errors, isValid}, handleSubmit} = useForm<IFormProps>(\n        {mode:'onChange', defaultValues:{role:UserRole.User, countrySelect:CountrySelect.United_Kingdom},\n    });\n    const onCompleted = (data: createAccountMutation) => {\n        const {\n            createAccount: {ok}\n        } = data;\n        if(ok){\n            alert('Account Created! Log in Now!');\n            history.push('/')\n        }\n        \n    }\n    const [createAccountMutation, {data:createAccountResult, loading}] = useMutation<createAccountMutation, createAccountMutationVariables>(CREATE_ACCOUNT_MUTATION,{\n        onCompleted        \n    });\n    const onSubmit = () => {\n        if(!loading){\n            const {email, password, role, countrySelect} = getValues()\n            createAccountMutation({\n                variables:{\n                    createAccountInput:{\n                        email,\n                        password,\n                        role,\n                        countrySelect\n                    }\n                }\n            })\n        }\n    }\n\n    return(\n        <div className='lg:bg-gray-700 lg:h-screen flex flex-col items-center justify-center'>\n            <Helmet><title>create-account | XON</title></Helmet>\n            <div className='w-full max-w-screen-sm flex flex-col items-center px-5 mt-10 lg:mb-10'>\n                <h3 className='lg:text-white font-semibold text-3xl mb-5'>Create Account</h3>\n                <h4 className='lg:text-white font-medium w-full text-left text-xl mb-3'>Let's get Start!</h4>\n                <form className='w-full grid gap-3 py-3' onSubmit={handleSubmit(onSubmit)}>\n                    <input\n                     className='input' \n                     placeholder='example@example.com'\n                     type='email'\n                     {...register('email',{required: 'Email is required', pattern: PATTERN})}/>\n                     {errors.email?.message && (\n                         <FormError errorMessage={errors.email.message}/>\n                     )}\n                    <input\n                     className='input'  \n                     placeholder='password'\n                     type='password'\n                     {...register('password', {required: 'Password is required', minLength:3})}/>\n                     {errors.password?.message && (\n                         <FormError errorMessage={errors.password.message}/>\n                     )}\n                     {errors.email?.type === \"minLength\" && (\n                         <FormError errorMessage={`Password must be more than 3 chars.`}/>\n                     )}\n                     <select {...register('role', {required: true})} className='input'>\n                         {Object.keys(UserRole).map((role, index) => (\n                             <option key={index}>{role}</option>\n                         ))}\n                     </select>\n                     <select {...register('countrySelect', {required: true})} className='input'>\n                         {Object.keys(CountrySelect).map((countrySelect, index) => (\n                             <option key={index}>{countrySelect}</option>\n                         ))}\n                     </select>\n                    <Button canClick={isValid} loading={loading} actionText={'Create an Account'}/>\n                </form>\n                {createAccountResult?.createAccount.error && (\n                    <FormError errorMessage={createAccountResult.createAccount.error}/>\n                )}\n                <div className='w-full text-center lg:text-white'>\n                    Already have an account?{\" \"}\n                    <Link to='/' className='hover:underline lg:text-yellow-200 text-indigo-500'>Log In Now</Link>\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport { useMutation } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { useForm } from 'react-hook-form';\nimport { FormError } from '../component/formerror';\nimport { loginMutation, loginMutationVariables } from '../api/loginMutation';\nimport { Button } from '../component/button';\nimport { Link } from 'react-router-dom';\nimport { Helmet } from 'react-helmet-async';\nimport { authTokenVar, isLoggedInVar } from '../apollo';\nimport { LOCALSTORAGE_TOKEN, PATTERN } from '../constant';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGg } from '@fortawesome/free-brands-svg-icons';\n\nconst LOGIN_MUTATION = gql`\n mutation loginMutation($loginInput: LoginInput!){\n    login(input: $loginInput){\n        ok\n        error\n        token\n    }\n }\n`\n\ninterface IForm {\n    email: string;\n    password: string;\n    resultError?: string;\n}\n\nexport const Login = () => {\n    const { getValues, handleSubmit, register, formState:{errors, isValid}} = useForm<IForm>({mode: 'onChange'})\n    const onCompleted = (data:loginMutation) => {\n        const {login: {ok, token}} = data;\n        if(ok && token){\n            localStorage.setItem(LOCALSTORAGE_TOKEN, token);\n            authTokenVar(token);\n            isLoggedInVar(true)\n        }\n    }\n    const [loginMutation, {data: loginMutationResult, loading}] = useMutation<loginMutation, loginMutationVariables>(LOGIN_MUTATION, {\n        onCompleted\n    })\n    const onSubmit = () => {\n        if(!loading){\n            const {email, password} = getValues()\n            loginMutation({\n                variables:{\n                    loginInput:{\n                        email,\n                        password\n                    }\n                }\n            });\n        }\n    };\n    \n    return(\n        <div className='lg:bg-gray-700 lg:h-screen flex flex-col items-center lg:justify-center'>\n            <Helmet>\n                <title>Login | XON</title>\n            </Helmet>\n            <div className='w-full max-w-screen-sm flex flex-col items-center px-5 mt-10 lg:mb-10'>\n                <FontAwesomeIcon icon={faGg} className='mb-5 text-5xl lg:text-white'/>\n                <h4 className='w-full font-medium text-left mb-3 text-xl lg:text-white'>Welcome!</h4>\n                <form className='grid gap-3 py-3 w-full' onSubmit={handleSubmit(onSubmit)}> \n                    <input\n                     {...register(\"email\", {required: `Email is required`, pattern: PATTERN})}\n                     placeholder=\"example@emaple.com\"\n                     type=\"email\"\n                     className=\"input\" \n                    />\n                    {errors.email?.message && (\n                        <FormError errorMessage={errors.email.message}/>\n                    )}\n                    <input\n                     {...register(\"password\", {required: `Password is required`, minLength:3})}\n                     placeholder=\"password\"\n                     type=\"password\"\n                     className=\"input\" \n                    />\n                    {errors.password?.message && (\n                        <FormError errorMessage={errors.password.message}/>\n                    )}\n                    {errors.password?.type === \"minLength\" && (\n                        <FormError errorMessage=\"Password must be more than 3 chars.\"/>\n                    )}\n                    <Button canClick={isValid} loading={loading} actionText={'Log In'}/>\n                    {loginMutationResult?.login.error && (\n                        <FormError errorMessage={loginMutationResult.login.error}/>\n                    )}\n                </form>\n                <div className='w-full text-center lg:text-white'>\n                    New to User?{\" \"}\n                    <Link to='/create-account' className='lg:text-yellow-200 text-indigo-500 hover:underline'>create an Account!</Link>\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport { NotFound } from '../pages/404';\nimport { CreateAccount } from '../pages/create-account';\nimport { Login } from '../pages/login';\n\nexport const LoggedOutRouter = () => {\n    return(\n        <Router>\n            <Switch>\n            <Route path=\"/create-account\">\n                <CreateAccount/>\n            </Route>\n            <Route path=\"/\" exact>\n                <Login/>\n            </Route>\n            <Route>\n                <NotFound/>\n            </Route>\n            </Switch>\n        </Router>\n    )\n}","import React from 'react';\nimport { useReactiveVar } from '@apollo/client';\nimport { isLoggedInVar } from './apollo';\nimport { LoggedInRouter } from './routers/logged-in-router';\nimport { LoggedOutRouter } from './routers/logged-out-router';\n\nfunction App() {\n  const IsLoggedIn = useReactiveVar(isLoggedInVar);\n  return IsLoggedIn ? <LoggedInRouter/> : <LoggedOutRouter/>\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ApolloProvider } from '@apollo/client';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { client } from './apollo';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './styles/styles.css'\nimport {HelmetProvider} from 'react-helmet-async';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n    <HelmetProvider>\n    <App />\n    </HelmetProvider>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}